<ma:MonitorAwareWindow x:Class="SnowyImageCopy.Views.MainWindow"
					   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					   xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
					   xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
					   xmlns:ma="clr-namespace:MonitorAware.Views;assembly=MonitorAware"
					   xmlns:views="clr-namespace:SnowyImageCopy.Views"
					   xmlns:viewModels="clr-namespace:SnowyImageCopy.ViewModels"
					   xmlns:models="clr-namespace:SnowyImageCopy.Models"
					   xmlns:behaviors="clr-namespace:SnowyImageCopy.Views.Behaviors"
					   xmlns:controls="clr-namespace:SnowyImageCopy.Views.Controls"
					   x:Name="MainWindowRoot"
					   Title="{Binding Source={x:Static views:ProductInfo.ProductInfoShort}, Mode=OneWay}"
					   FontFamily="Segoe UI"
					   Width="720" Height="480" MinWidth="640" MinHeight="280"
					   Icon="/SnowyImageCopy;component/Resources/Feather.ico">
	<Window.DataContext>
		<viewModels:MainWindowViewModel/>
	</Window.DataContext>

	<Window.TaskbarItemInfo>
		<TaskbarItemInfo ProgressState="{Binding Op.ProgressState}"
						 ProgressValue="{Binding Op.ProgressCopiedCurrent, Converter={StaticResource DoubleCentesimalConverterKey}}"/>
	</Window.TaskbarItemInfo>

	<i:Interaction.Behaviors>
		<behaviors:WindowActivateBehavior IsRequested="{Binding IsWindowActivateRequested, Mode=TwoWay}"/>
	</i:Interaction.Behaviors>

	<Grid x:Name="LayoutRoot"
		  Background="{StaticResource Window.Background}">
		<Grid.ColumnDefinitions>
			<ColumnDefinition/>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition Width="Auto"/>
		</Grid.ColumnDefinitions>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition/>
		</Grid.RowDefinitions>

		<!-- Dashboard area -->
		<Grid Margin="0,8,0,8">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition Width="10"/>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition/>
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<Grid x:Name="CommandsAndProgress">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="14"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>

				<!-- Commands -->
				<Grid>
					<Grid Width="264" Height="82" VerticalAlignment="Top">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="102"/>
							<ColumnDefinition Width="40"/>
							<ColumnDefinition Width="62"/>
							<ColumnDefinition/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>

						<controls:BusyButton
							Grid.ColumnSpan="2"
							Width="140" Height="40"
							Margin="0,0,2,2"
							FontSize="15"
							Content="{Binding Resources.Command_CheckCopy, Source={x:Static models:ResourceService.Current}}"
							Command="{Binding CheckCopyCommand}"
							IsBusy="{Binding IsCheckCopyRunning, Mode=OneWay}">
						</controls:BusyButton>
						<controls:BusyButton
							Grid.Column="2" Grid.Row="0"
							Width="60" Height="40"
							Margin="0,0,2,2"
							FontSize="15"
							Content="{Binding Resources.Command_CheckCopyAuto, Source={x:Static models:ResourceService.Current}}"
							Command="{Binding CheckCopyAutoCommand}"
							IsBusy="{Binding IsCheckCopyAutoRunning, Mode=OneWay}"/>
						<controls:BusyButton
							Grid.Row="1" Grid.Column="0"
							Width="100" Height="40"
							Margin="0,0,2,0"
							FontSize="15"
							Content="{Binding Resources.Command_Check, Source={x:Static models:ResourceService.Current}}"
							Command="{Binding CheckCommand}"
							IsBusy="{Binding IsCheckRunning, Mode=OneWay}">
						</controls:BusyButton>
						<controls:BusyButton
							Grid.Column="1" Grid.Row="1" Grid.ColumnSpan="2"
							Width="100" Height="40"
							Margin="0,0,2,0"
							FontSize="15"
							Content="{Binding Resources.Command_Copy, Source={x:Static models:ResourceService.Current}}"
							Command="{Binding CopyCommand}"
							IsBusy="{Binding IsCopyRunning, Mode=OneWay}"/>
						<controls:BusyButton
							Grid.Column="3" Grid.Row="0" Grid.RowSpan="2"
							Width="60" Height="82"
							FontSize="15"
							Content="{Binding Resources.Command_Stop, Source={x:Static models:ResourceService.Current}}"
							Command="{Binding StopCommand}">
						</controls:BusyButton>
					</Grid>
				</Grid>

				<!-- Progress -->
				<Grid Grid.Column="2"
					  Width="82" Height="82" VerticalAlignment="Top">
					<controls:CircularProgressBar
						Width="82" HorizontalAlignment="Center" VerticalAlignment="Center"
						StrokeThickness="7"
						ArcSegmentColor="{StaticResource Progress.ArcSegment.Current}"
						RingSegmentColor="{StaticResource Progress.RingSegment}"
						RingSegmentOpacity="0.11"
						Percentage="{Binding Op.ProgressCopiedCurrent}"/>
					<controls:CircularProgressBar
						Width="68.4" HorizontalAlignment="Center" VerticalAlignment="Center"
						StrokeThickness="14"
						ArcSegmentColor="{StaticResource Progress.ArcSegment.All}"
						RingSegmentColor="{StaticResource Progress.RingSegment}"
						RingSegmentOpacity="0.11"
						Percentage="{Binding Op.ProgressCopiedAll}"/>
					<TextBox
						HorizontalAlignment="Center" VerticalAlignment="Center"
						BorderThickness="0"
						Background="{x:Null}"
						IsUndoEnabled="False"
						Text="{Binding Op.RemainingTime, Converter={StaticResource TimeSpanToStringConverterKey}}"/>
				</Grid>
			</Grid>

			<StackPanel Grid.Column="2" Grid.Row="0"
						Height="60" HorizontalAlignment="Stretch" VerticalAlignment="Top">
				<!-- Status -->
				<TextBox Height="24" Width="256" HorizontalAlignment="Left" VerticalAlignment="Top"
						 Margin="4,0,0,4" Padding="2,0"
						 VerticalContentAlignment="Center"
						 FontSize="13" IsReadOnly="True" IsUndoEnabled="False"
						 Text="{Binding OperationStatus, Mode=OneWay}"/>

				<StackPanel Orientation="Horizontal">
					<!-- Delete On Copy -->
					<StackPanel Orientation="Horizontal"
								Visibility="{Binding SettingsCurrent.EnablesChooseDeleteOnCopy, Converter={StaticResource BooleanToVisibilityConverterKey}}">
						<Label
							VerticalAlignment="Center"
							Content="{Binding Resources.Options_DeleteOnCopy, Source={x:Static models:ResourceService.Current}}"/>
						<controls:SlidingToggleButton
							Width="60" Height="24"
							Margin="0,4"
							TextChecked="ON"
							TextUnchecked="OFF"
							ForegroundChecked="{StaticResource Sliding.CheckedSecond.Foreground}"
							ForegroundUnchecked="{StaticResource Sliding.Unchecked.Foreground}"
							BackgroundChecked="{StaticResource Sliding.CheckedSecond.Background}"
							BackgroundUnchecked="{StaticResource Sliding.Unchecked.Background}"
							IsChecked="{Binding SettingsCurrent.DeleteOnCopy, Mode=TwoWay}"/>
					</StackPanel>

					<!-- Instant Copy -->
					<StackPanel Orientation="Horizontal">
						<Label
							VerticalAlignment="Center"
							Content="{Binding Resources.Options_InstantCopy, Source={x:Static models:ResourceService.Current}}"/>
						<controls:SlidingToggleButton
							Width="60" Height="24"
							Margin="0,4"
							TextChecked="ON"
							TextUnchecked="OFF"
							ForegroundChecked="{StaticResource Sliding.Checked.Foreground}"
							ForegroundUnchecked="{StaticResource Sliding.Unchecked.Foreground}"
							BackgroundChecked="{StaticResource Sliding.Checked.Background}"
							BackgroundUnchecked="{StaticResource Sliding.Unchecked.Background}"
							IsChecked="{Binding SettingsCurrent.InstantCopy, Mode=TwoWay}"/>
					</StackPanel>
				</StackPanel>
			</StackPanel>
		</Grid>

		<Grid Grid.Column="1" Grid.Row="0"
			  Visibility="{Binding IsChecked, ElementName=OptionsButtonLeft, Converter={StaticResource BooleanInverseToVisibilityConverterKey}}">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition/>
			</Grid.RowDefinitions>

			<!-- Options switch (Left) -->
			<ToggleButton
				x:Name="OptionsButtonLeft"
				Height="24" HorizontalAlignment="Right" VerticalAlignment="Top"
				Margin="0,8,0,0" Padding="8,0,8,0"
				Content="{Binding Resources.Options, Source={x:Static models:ResourceService.Current}}"
				Style="{StaticResource SwitchButtonStyle}"/>
		</Grid>

		<!-- Options area -->
		<Grid Grid.Column="2" Grid.Row="0" Grid.RowSpan="2"
			  x:Name="OptionsGrid"
			  Visibility="{Binding IsChecked, ElementName=OptionsButtonLeft, Converter={StaticResource BooleanToVisibilityConverterKey}}">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition/>
			</Grid.RowDefinitions>

			<!-- Options switch (Right) -->
			<ToggleButton
				x:Name="OptionsButtonRight"
				Height="24" HorizontalAlignment="Stretch"
				Margin="0,8,0,0" Padding="8,0,8,0"
				HorizontalContentAlignment="Left"
				Content="{Binding Resources.Options, Source={x:Static models:ResourceService.Current}}"
				IsChecked="{Binding IsChecked, ElementName=OptionsButtonLeft}"
				Style="{StaticResource SwitchButtonStyle}"/>

			<ScrollViewer
				Grid.Row="1"
				VerticalScrollBarVisibility="Auto">
				<Border BorderThickness="1,0,0,0"
						BorderBrush="{StaticResource BorderLine.Weak}">
					<views:Options/>
				</Border>
			</ScrollViewer>
		</Grid>

		<!-- Image area -->
		<Grid Grid.Column="0" Grid.Row="1" Grid.ColumnSpan="2">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition/>
			</Grid.RowDefinitions>

			<!-- Current image switch -->
			<Grid>
				<ToggleButton
					x:Name="CurrentImageTab"
					Height="24" HorizontalAlignment="Right"
					Padding="8,0,8,0"
					HorizontalContentAlignment="Left"
					Content="{Binding Resources.CurrentImage, Source={x:Static models:ResourceService.Current}}"
					IsChecked="{Binding IsCurrentImageVisible, Mode=TwoWay}"
					Style="{StaticResource SwitchButtonStyle}">
					<ToggleButton.Width>
						<MultiBinding Converter="{StaticResource DoubleAndVisibilityToDoubleConverterKey}">
							<Binding ElementName="CurrentImageGridSplitter" Path="ActualWidth"/>
							<Binding ElementName="CurrentImageGridSplitter" Path="Visibility"/>
							<Binding ElementName="CurrentImageGrid" Path="ActualWidth"/>
							<Binding ElementName="CurrentImageGrid" Path="Visibility"/>
						</MultiBinding>
					</ToggleButton.Width>
					<ToggleButton.MaxWidth>
						<MultiBinding Converter="{StaticResource DoubleAndVisibilityToDoubleConverterKey}" ConverterParameter="Subtract">
							<Binding ElementName="LayoutRoot" Path="ActualWidth"/>
							<Binding ElementName="LayoutRoot" Path="Visibility"/>
							<Binding ElementName="OptionsGrid" Path="ActualWidth"/>
							<Binding ElementName="OptionsGrid" Path="Visibility"/>
						</MultiBinding>
					</ToggleButton.MaxWidth>
					<ToggleButton.Margin>
						<Binding Path="IsIntersected" ElementName="CurrentImageTabIntersectionBehavior" Converter="{StaticResource BooleanInverseToThicknessConverterKey}">
							<Binding.ConverterParameter>
								<Thickness>0,-24,0,0</Thickness>
							</Binding.ConverterParameter>
						</Binding>
					</ToggleButton.Margin>

					<i:Interaction.Behaviors>
						<behaviors:FrameworkElementIntersectionBehavior
							x:Name="CurrentImageTabIntersectionBehavior"
							TargetFrameworkElement ="{Binding ElementName=CommandsAndProgress}"
							ExpandedMargin="0,24,0,0"
							WindowDpi="{Binding WindowHandler.WindowDpi, ElementName=MainWindowRoot, Mode=OneWay}">
							<behaviors:FrameworkElementIntersectionBehavior.TriggerObject>
								<MultiBinding Converter="{StaticResource ObjectArrayConverterKey}">
									<Binding ElementName="LayoutRoot" Path="ActualWidth" Mode="OneTime"/>
									<Binding ElementName="ImageListView" Path="ActualWidth"/>
								</MultiBinding>
							</behaviors:FrameworkElementIntersectionBehavior.TriggerObject>
						</behaviors:FrameworkElementIntersectionBehavior>
					</i:Interaction.Behaviors>
				</ToggleButton>
			</Grid>

			<Grid Grid.Row="1">
				<Grid.ColumnDefinitions>
					<ColumnDefinition/>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>

				<!-- Image list view -->
				<ListView
					x:Name="ImageListView"
					SelectionMode="Single"
					ItemsSource="{Binding FileListCoreView}"
					SelectedIndex="{Binding FileListCoreViewIndex, Mode=OneWay}">
					<ListView.Resources>
						<DataTemplate x:Key="RealizedThumbnail">
							<Border	Margin="4"
									Background="{Binding Status, Converter={StaticResource FileStatusToBrushConverterKey}}">
								<Grid>
									<Grid Background="{StaticResource FileItemStatus.Foreground}"
										  Opacity="{Binding Opacity, ElementName=ListViewItemShadow}"/>
									<Grid Margin="4">
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*"/>
											<ColumnDefinition Width="Auto"/>
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto"/>
											<RowDefinition/>
										</Grid.RowDefinitions>
										<TextBlock>
											<Run Text="{Binding Directory, Mode=OneTime}"/>
											<LineBreak/>
											<Run Text="{Binding FileName, Mode=OneTime}"/>
											<LineBreak/>
											<Run Text="{Binding Date, Mode=OneTime, StringFormat=yyyy/MM/dd}"/>
											<LineBreak/>
											<Run Text="{Binding Date, Mode=OneTime, StringFormat=HH\\:mm\\:ss}"/>
										</TextBlock>
										<TextBlock
											Grid.Column="0" Grid.Row="1"
											VerticalAlignment="Center"
											FontSize="14"
											Text="{Binding Status, Converter={StaticResource FileStatusToStringConverterKey}}"
											Foreground="{StaticResource FileItemStatus.Foreground}"/>
										<Image
											Grid.Column="1" Grid.Row="0" Grid.RowSpan="2"
											Width="120" Height="90"
											Margin="4,0,0,0"
											Source="{Binding Thumbnail}"/>
									</Grid>
								</Grid>
							</Border>
						</DataTemplate>
					</ListView.Resources>

					<ListView.Template>
						<ControlTemplate TargetType="{x:Type ListView}">
							<Border BorderThickness="0"
									Background="{StaticResource ImageListView.Background}">
								<ScrollViewer HorizontalScrollBarVisibility="Disabled">
									<WrapPanel Margin="4,0,4,4"
											   IsItemsHost="True"/>
								</ScrollViewer>
							</Border>
						</ControlTemplate>
					</ListView.Template>

					<ListView.ItemTemplate>
						<DataTemplate>
							<ContentControl x:Name="Thumbnail"
											MinWidth="228" Height="108" Margin="0"
											Content="{Binding}"
											ContentTemplate="{x:Null}"/>
							<DataTemplate.Triggers>
								<DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}}" Value="True">
									<Setter TargetName="Thumbnail" Property="ContentTemplate" Value="{StaticResource RealizedThumbnail}"/>
								</DataTrigger>
							</DataTemplate.Triggers>
						</DataTemplate>
					</ListView.ItemTemplate>

					<ListView.ItemContainerStyle>
						<Style TargetType="{x:Type ListViewItem}">
							<Setter Property="IsSelected" Value="{Binding IsSelected}"/>
							<Setter Property="Margin" Value="0"/>
							<Setter Property="OverridesDefaultStyle" Value="True"/>
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type ContentControl}">
										<Grid>
											<Grid x:Name="ListViewItemShadow"
												  Opacity="0"/>
											<Border Background="{TemplateBinding Background}">
												<ContentPresenter/>
											</Border>

											<VisualStateManager.VisualStateGroups>
												<VisualStateGroup x:Name="CommonStates">
													<VisualState x:Name="Normal"/>
													<VisualState x:Name="MouseOver">
														<Storyboard>
															<DoubleAnimation
																Storyboard.TargetName="ListViewItemShadow"
																Storyboard.TargetProperty="Opacity"
																Duration="0:0:0.1"
																To="0.2"/>
														</Storyboard>
													</VisualState>
												</VisualStateGroup>
											</VisualStateManager.VisualStateGroups>
										</Grid>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ListView.ItemContainerStyle>

					<i:Interaction.Behaviors>
						<behaviors:ItemsControlChildBehavior/>
						<behaviors:SelectorSelectedItemBehavior/>
					</i:Interaction.Behaviors>
				</ListView>

				<!-- Browser for readme -->
				<Border
					Grid.Column="0"
					BorderThickness="0,1,0,0"
					BorderBrush="{StaticResource BorderLine.Weak}"
					Visibility="{Binding IsBrowserOpen, Converter={StaticResource BooleanToVisibilityConverterKey}}">
					<WebBrowser Visibility="{Binding Visibility, RelativeSource={RelativeSource FindAncestor, AncestorType=Border}}">
						<i:Interaction.Behaviors>
							<behaviors:BrowserBehavior
								TargetFile="{Binding Resources.ReadmeFile, Source={x:Static models:ResourceService.Current}}"
								AlternateText="Read readme."/>
						</i:Interaction.Behaviors>
					</WebBrowser>
				</Border>

				<!-- Splitter -->
				<controls:HideableGridSplitter
					Grid.Column="1"
					x:Name="CurrentImageGridSplitter"
					Width="8" HorizontalAlignment="Center" VerticalAlignment="Stretch"
					Background="{StaticResource Window.Background}"
					ShowsPreview="True" ResizeDirection="Columns"
					MinLength="168"
					BorderBrush="{StaticResource BorderLine.Weak}"
					BorderThickness="1,0,0,0"
					Visibility="{Binding IsCurrentImageVisible, Converter={StaticResource BooleanToVisibilityConverterKey}}"/>

				<!-- Current image -->
				<Grid
					Grid.Column="2"
					x:Name="CurrentImageGrid"
					Visibility="{Binding IsCurrentImageVisible, Converter={StaticResource BooleanToVisibilityConverterKey}}">
					<Grid VerticalAlignment="Top">
						<Image x:Name="CurrentImageImage"
							   Width="{Binding CurrentImageWidth, Mode=OneWay}"
							   HorizontalAlignment="Left" VerticalAlignment="Top"
							   Margin="0,4,8,30"
							   Stretch="None"
							   Source="{Binding CurrentImage, Mode=OneWay}"/>

						<StackPanel Margin="0,0,0,4" VerticalAlignment="Bottom"
									Orientation="Horizontal">
							<Button Height="22" Margin="0,0,2,0"
									Padding="7,0"
									Content="{Binding Resources.Command_Save, Source={x:Static models:ResourceService.Current}}"
									Command="{Binding SaveDesktopCommand}"
									Style="{StaticResource ActionButtonStyle}"/>
							<Button Height="22"
									Padding="7,0"
									Content="{Binding Resources.Command_Send, Source={x:Static models:ResourceService.Current}}"
									Command="{Binding SendClipboardCommand}"
									Style="{StaticResource ActionButtonStyle}"/>
						</StackPanel>
					</Grid>

					<i:Interaction.Behaviors>
						<behaviors:GridSizeBehavior
							IsReliable="{Binding IsWindowPlacementReliable, ElementName=MainWindowRoot}"
							MaxWidth="{Binding ActualWidth, ElementName=LayoutRoot, Mode=OneWay}"
							Padding="{Binding Margin, ElementName=CurrentImageImage}"
							FrameSize="{Binding CurrentFrameSize, Mode=OneWayToSource}"/>
					</i:Interaction.Behaviors>
				</Grid>
			</Grid>
		</Grid>
	</Grid>
</ma:MonitorAwareWindow>