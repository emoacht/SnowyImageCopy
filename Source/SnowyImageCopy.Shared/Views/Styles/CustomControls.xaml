<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:controls="clr-namespace:SnowyImageCopy.Views.Controls">

	<!--===================================
	 Styles, templates for custom controls
	====================================-->

	<!-- NumericUpDown -->
	<Style TargetType="{x:Type controls:NumericUpDown}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid Width="{TemplateBinding Width}">
						<TextBox HorizontalAlignment="Stretch"
								 HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
								 IsReadOnly="True" IsUndoEnabled="False"
								 Text="{Binding Value, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:NumericUpDown}}, Mode=OneWay}"/>
						<RepeatButton x:Name="PART_DownButton"
									  Width="30" HorizontalAlignment="Left"
									  Style="{StaticResource ButtonBaseStyle}">
							<Path Margin="4.5" Stretch="Uniform"
								  Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RepeatButton}}, Mode=OneWay}">
								<Path.Data>
									<GeometryGroup FillRule="Nonzero">
										<RectangleGeometry Rect="0,14 30,2"/>
										<RectangleGeometry Rect="14,0 0,30"/>
									</GeometryGroup>
								</Path.Data>
							</Path>
						</RepeatButton>
						<RepeatButton x:Name="PART_UpButton"
									  Width="30" HorizontalAlignment="Right"
									  Style="{StaticResource ButtonBaseStyle}">
							<Path Margin="4.5" Stretch="Uniform"
								  Fill="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RepeatButton}}, Mode=OneWay}">
								<Path.Data>
									<GeometryGroup FillRule="Nonzero">
										<RectangleGeometry Rect="0,14 30,2"/>
										<RectangleGeometry Rect="14,0 2,30"/>
									</GeometryGroup>
								</Path.Data>
							</Path>
						</RepeatButton>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- SlidingToggleButton -->
	<Style TargetType="{x:Type controls:SlidingToggleButton}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Grid Cursor="Arrow" ForceCursor="True">
						<!-- Background -->
						<TextBox x:Name="PART_BackgroundTextBox"
								 IsReadOnly="True" IsUndoEnabled="False"/>

						<!-- Foreground -->
						<DockPanel LastChildFill="True">
							<Button DockPanel.Dock="Left"
									x:Name="PART_ForegroundButtonLeft"
									Width="18"
									Style="{StaticResource ButtonBaseStyle}"/>
							<Button DockPanel.Dock="Right"
									x:Name="PART_ForegroundButtonRight"
									Width="18"
									Style="{StaticResource ButtonBaseStyle}"/>
							<TextBlock x:Name="PART_ForegroundTextBlock"
									   HorizontalAlignment="Center" VerticalAlignment="Center"
									   IsHitTestVisible="False"/>
						</DockPanel>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="SwitchButtonStyle" TargetType="{x:Type controls:SlidingToggleButton}" BasedOn="{StaticResource {x:Type controls:SlidingToggleButton}}">
		<Setter Property="Width" Value="60"/>
		<Setter Property="Height" Value="24"/>
		<Setter Property="TextChecked" Value="ON"/>
		<Setter Property="TextUnchecked" Value="OFF"/>
		<Setter Property="ForegroundChecked" Value="{StaticResource Sliding.Checked.Foreground}"/>
		<Setter Property="ForegroundUnchecked" Value="{StaticResource Sliding.Unchecked.Foreground}"/>
		<Setter Property="BackgroundChecked" Value="{StaticResource Sliding.Checked.Background}"/>
		<Setter Property="BackgroundUnchecked" Value="{StaticResource Sliding.Unchecked.Background}"/>
	</Style>

	<Style x:Key="SwitchCautionButtonStyle" TargetType="{x:Type controls:SlidingToggleButton}" BasedOn="{StaticResource SwitchButtonStyle}">
		<Setter Property="ForegroundChecked" Value="{StaticResource Sliding.CheckedCaution.Foreground}"/>
		<Setter Property="BackgroundChecked" Value="{StaticResource Sliding.CheckedCaution.Background}"/>
	</Style>

	<!-- BusyButton -->
	<Style TargetType="{x:Type controls:BusyButton}">
		<Style.Resources>
			<PathGeometry x:Key="WaveForm"
						  Figures="M0,100 C30,100 30,0 60,0 90,0 90,100 120,100"/>
		</Style.Resources>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Border x:Name="ButtonBorder"
								BorderBrush="{StaticResource SnowBlue.Normal.Border}"
								BorderThickness="0"
								Background="{StaticResource SnowBlue.Normal.Background}"
								TextBlock.Foreground="{StaticResource SnowBlue.Normal.Foreground}">
							<Grid>
								<Grid x:Name="WaveBox"
									  Height="30"
									  Opacity="0">
									<Grid.Background>
										<DrawingBrush x:Name="WaveBrush"
													  Viewport="0,0,25,30"
													  ViewportUnits="Absolute"
													  TileMode="Tile">
											<DrawingBrush.Drawing>
												<GeometryDrawing Geometry="{StaticResource WaveForm}">
													<GeometryDrawing.Pen>
														<Pen Brush="White"
															 Thickness="5"/>
													</GeometryDrawing.Pen>
												</GeometryDrawing>
											</DrawingBrush.Drawing>
										</DrawingBrush>
									</Grid.Background>
								</Grid>

								<TextBlock x:Name="PresenterBackground"
										   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										   Margin="{TemplateBinding Padding}"
										   Foreground="{StaticResource SnowBlue.Normal.Blur}"
										   Opacity="0.8"
										   Text="{TemplateBinding ContentPresenter.Content}">
									<TextBlock.Effect>
										<BlurEffect Radius="2"
													KernelType="Gaussian"/>
									</TextBlock.Effect>
								</TextBlock>

								<ContentPresenter x:Name="Presenter"
												  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												  Margin="{TemplateBinding Padding}"
												  Content="{TemplateBinding Content}"/>
							</Grid>
						</Border>

						<!--<Rectangle x:Name="FocusVisualElement"
								   Margin="2"
								   StrokeThickness="1"
								   Stroke="#60000000"
								   StrokeDashArray="1 2"
								   Opacity="0"/>-->

						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.MouseOver.BackgroundColor}"/>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.MouseOver.BorderColor}"/>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Pressed">
									<Storyboard>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Pressed.BackgroundColor}"/>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Pressed.BorderColor}"/>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Disabled.BorderColor}"/>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Disabled.BackgroundColor}"/>

										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Disabled.ForegroundColor}"/>
										<ColorAnimation
											Storyboard.TargetName="PresenterBackground"
											Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.Disabled.BlurColor}"/>
									</Storyboard>
								</VisualState>

								<VisualState x:Name="Busy">
									<Storyboard>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.MouseOver.BorderColor}"/>
										<ColorAnimation
											Storyboard.TargetName="ButtonBorder"
											Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
											Duration="0:0:0.1"
											To="{StaticResource SnowBlue.MouseOver.BackgroundColor}"/>

										<DoubleAnimation
											Storyboard.TargetName="WaveBox"
											Storyboard.TargetProperty="Opacity"
											Duration="0:0:0.1"
											To="0.8"/>
										<RectAnimation
											Storyboard.TargetName="WaveBrush"
											Storyboard.TargetProperty="Viewport"
											Duration="0:0:1"
											RepeatBehavior="Forever"
											From="0,0,25,30" To="25,0,25,30"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>

							<!--<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimation
											Storyboard.TargetName="FocusVisualElement"
											Storyboard.TargetProperty="Opacity"
											Duration="0"
											To="1"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>-->
						</VisualStateManager.VisualStateGroups>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- CircularProgressBar -->
	<Style TargetType="{x:Type controls:CircularProgressBar}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type controls:CircularProgressBar}">
					<Grid>
						<!-- Background ring -->
						<Ellipse Width="{Binding Width, ElementName=PART_CirclePathBox}"
								 Height="{Binding Height, ElementName=PART_CirclePathBox}"
								 Stroke="{TemplateBinding RingSegmentColor}"
								 Opacity="{TemplateBinding RingSegmentOpacity}"
								 StrokeThickness="{TemplateBinding StrokeThickness}"/>

						<!-- Foreground arc -->
						<Path x:Name="PART_CirclePathBox"
							  Stroke="{TemplateBinding ArcSegmentColor}"
							  StrokeThickness="{TemplateBinding StrokeThickness}">
							<Path.Data>
								<PathGeometry>
									<PathGeometry.Figures>
										<PathFigureCollection>
											<PathFigure x:Name="PART_CirclePathFigure">
												<PathFigure.Segments>
													<PathSegmentCollection>
														<ArcSegment x:Name="PART_CircleArcSegment"
																	SweepDirection="Clockwise"/>
													</PathSegmentCollection>
												</PathFigure.Segments>
											</PathFigure>
										</PathFigureCollection>
									</PathGeometry.Figures>
								</PathGeometry>
							</Path.Data>
						</Path>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- NumericTextBox -->
	<Style TargetType="{x:Type controls:NumericTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
		<Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Self}, Path=Value, Mode=OneWay}"/>
		<Setter Property="IsReadOnly" Value="True"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="IsUndoEnabled" Value="False"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
	</Style>

</ResourceDictionary>